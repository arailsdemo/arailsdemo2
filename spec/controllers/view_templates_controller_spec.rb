require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe ViewTemplatesController do

  def mock_view_template(stubs={})
    @mock_view_template ||= mock_model(ViewTemplate, stubs).as_null_object
  end

  describe "GET index" do
    it "assigns all view_templates as @view_templates" do
      ViewTemplate.stub(:all) { [mock_view_template] }
      get :index
      assigns(:view_templates).should eq([mock_view_template])
    end
  end

  describe "GET show" do
    it "assigns the requested view_template as @view_template" do
      ViewTemplate.stub(:find).with("37") { mock_view_template }
      get :show, :id => "37"
      assigns(:view_template).should be(mock_view_template)
    end
  end

  describe "GET new" do
    it "assigns a new view_template as @view_template" do
      ViewTemplate.stub(:new) { mock_view_template }
      get :new
      assigns(:view_template).should be(mock_view_template)
    end
  end

  describe "GET edit" do
    it "assigns the requested view_template as @view_template" do
      ViewTemplate.stub(:find).with("37") { mock_view_template }
      get :edit, :id => "37"
      assigns(:view_template).should be(mock_view_template)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "assigns a newly created view_template as @view_template" do
        ViewTemplate.stub(:new).with({'these' => 'params'}) { mock_view_template(:save => true) }
        post :create, :view_template => {'these' => 'params'}
        assigns(:view_template).should be(mock_view_template)
      end

      it "redirects to the created view_template" do
        ViewTemplate.stub(:new) { mock_view_template(:save => true) }
        post :create, :view_template => {}
        response.should redirect_to(view_template_url(mock_view_template))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved view_template as @view_template" do
        ViewTemplate.stub(:new).with({'these' => 'params'}) { mock_view_template(:save => false) }
        post :create, :view_template => {'these' => 'params'}
        assigns(:view_template).should be(mock_view_template)
      end

      it "re-renders the 'new' template" do
        ViewTemplate.stub(:new) { mock_view_template(:save => false) }
        post :create, :view_template => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    let(:params) { {"action"=>"update", "id"=>"1", "revert"=>"2", "controller"=>"view_templates"} }

    describe "with valid params" do
      it "calls #successful_update? on the template instance" do
        ViewTemplate.stub(:find).with("1") { mock_view_template }
        mock_view_template.should_receive(:successful_update?).with(params)
        put :update, params
      end

      it "assigns the requested view_template as @view_template" do
        ViewTemplate.stub(:find) { mock_view_template(:update_attributes => true) }
        put :update, :id => "1"
        assigns(:view_template).should be(mock_view_template)
      end

      it "redirects to the view_template" do
        ViewTemplate.stub(:find) { mock_view_template(:update_attributes => true) }
        put :update, :id => "1"
        response.should redirect_to(view_template_url(mock_view_template))
      end
    end

    describe "with invalid params" do
      it "assigns the view_template as @view_template" do
        ViewTemplate.stub(:find) { mock_view_template(:update_attributes => false) }
        put :update, :id => "1"
        assigns(:view_template).should be(mock_view_template)
      end

      it "re-renders the 'edit' template" do
        ViewTemplate.stub(:find) { mock_view_template(:update_attributes => false,
                                                      :errors => {:foo => 'bar'}) }
        put :update, :id => "1"
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested view_template" do
      ViewTemplate.stub(:find).with("37") { mock_view_template }
      mock_view_template.should_receive(:destroy)
      delete :destroy, :id => "37"
    end

    it "redirects to the view_templates list" do
      ViewTemplate.stub(:find) { mock_view_template }
      delete :destroy, :id => "1"
      response.should redirect_to(view_templates_url)
    end
  end

  describe "GET preview" do
    it "calls ViewTemplate.preview" do
      ViewTemplate.should_receive(:preview).with("1")
      get :preview, :id => "1"
    end
  end
end
